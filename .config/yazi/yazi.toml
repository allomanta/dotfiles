# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[headsup]
disable_exec_warn = true

[manager]
ratio = [1, 4, 3]
sort_by = "alphabetical"
sort_sensitive = false
sort_reverse = false
sort_dir_first = false
linemode = "size"
show_hidden = false
show_symlink = true
scrolloff = 5

[preview]
tab_size = 2
max_width = 600
max_height = 900
cache_dir = ""
image_filter = "triangle"
image_quality = 75
sixel_fraction = 15
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
edit = [
  { run = '${EDITOR:=vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
  { run = 'code "%*"', orphan = true, for = "windows" },
]
annotate = [{ run = 'xournalpp "$@"', desc = "Annotate", for = "unix" }]
libreoffice = [
  { run = 'libreoffice "$@"', desc = "LibreOffice", for = "unix" },
]
shell = [{ run = 'cd "$@"; $SHELL', desc = "Open shell here", block = true }]
open = [
  { run = 'nohup xdg-open "$@"', desc = "Open", for = "linux" },
  { run = 'open "$@"', desc = "Open", for = "macos" },
  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
reveal = [
  { run = 'open -R "$1"', desc = "Reveal", for = "macos" },
  { run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF", for = "unix" },
]
compress = [
  { run = 'ouch compress "$@" archive.zip', desc = "Zip files", for = "linux" },
]
extract = [
  # { run = 'ouch decompress "$1"', desc = "Extract here", for = "linux" },
  # { run = 'unar "$1"', desc = "Extract here", for = "macos" },
  # { run = 'unar "%1"', desc = "Extract here", for = "windows" },
	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },]
play = [
  { run = 'mpv "$@"', orphan = true, for = "unix" },
  { run = 'mpv "%1"', orphan = true, for = "windows" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
  { mime = "inode/directory", use = [
    "shell",
    "compress",
    "reveal",
  ] },
  { name = "*/", use = [
    "edit",
    "compress",
    "open",
    "reveal",
  ] },

  { mime = "text/*", use = [
    "edit",
    "compress",
    "libreoffice",
    "reveal",
  ] },
  { mime = "image/*", use = [
    "open",
    "compress",
    "reveal",
  ] },
  { mime = "{audio,video}/*", use = [
    "play",
    "compress",
    "reveal",
  ] },
  { mime = "inode/x-empty", use = [
    "edit",
    "compress",
    "reveal",
  ] },

  { mime = "application/pdf", use = [
    "open",
    "compress",
    "annotate",
    "reveal",
  ] },
  { mime = "application/json", use = [
    "edit",
    "compress",
    "reveal",
  ] },
  { mime = "*/javascript", use = [
    "edit",
    "compress",
    "reveal",
  ] },
  { mime = "application/{,g}zip", use = [ "extract", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },
  { mime = "*", use = [
    "open",
    "compress",
    "reveal",
  ] },
]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912  # 512MB
image_bound = [0, 0]
suppress_preload = false

[plugin]

preloaders = [
  # Image
  { mime = "image/vnd.djvu", run = "noop" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
]
previewers = [
  { name = "*/", run = "folder", sync = true },
  # Code
  { name = "*.tek", run = "tek-previewer" },
  { mime = "text/*", run = "code" },
  { mime = "*/xml", run = "code" },
  { mime = "*/javascript", run = "code" },
  { mime = "*/x-wine-extension-ini", run = "code" },
  # JSON
  { mime = "application/json", run = "json" },
  # Image
  { mime = "image/vnd.djvu", run = "noop" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Archive
  { mime = "application/zip", run = "archive" },
  { mime = "application/gzip", run = "archive" },
  { mime = "application/x-tar", run = "archive" },
  { mime = "application/x-bzip", run = "archive" },
  { mime = "application/x-bzip2", run = "archive" },
  { mime = "application/x-7z-compressed", run = "archive" },
  { mime = "application/x-rar", run = "archive" },
  { mime = "application/xz", run = "archive" },
  # Fallback
  { name = "*", run = "file" },
]

[input]
# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "top-center"
trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "top-center"
delete_offset = [0, 2, 50, 3]

# filter
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 2, 50, 3]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title = "Search via {n}:"
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [0, 2, 50, 3]

[select]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[which]
sort_by = "none"
sort_sensitive = false
sort_reverse = false

[log]
enabled = false

[[plugin.prepend_fetchers]]
id   = "git"
name = "*"
run  = "git"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*/"
run  = "git"
